{"vs/base/common/platform":["_"],"vs/platform/environment/node/argv":["选项","扩展管理","故障排查","应在其中存储 CLI 元数据的目录。","应在其中存储 CLI 元数据的目录。","将两个文件相互比较。","通过提供文件的两个修改版本的路径、两个修改版本的共同来源，以及保存合并结果的输出文件来执行三向合并。","将文件夹添加到上一个活动窗口。","打开路径下的文件并定位到特定行和特定列。","强制打开新窗口。","强制在已打开的窗口中打开文件或文件夹。","等文件关闭后再返回。","要使用的区域设置(例如 en-US 或 zh-TW)。","指定保存用户数据的目录。可用于打开多个不同的 Code 实例。","使用给定的配置文件打开所提供的文件夹或工作区，并将配置文件与工作区相关联。如果配置文件不存在，则会创建一个新的空配置文件。","打印使用情况。","设置扩展的根路径。","列出已安装的扩展。","使用 --list-extensions 时，显示已安装扩展的版本。","使用 --list-extensions 时，按提供的类别筛选已安装的扩展。","安装或更新扩展。参数是 VSIX 的扩展 ID 或路径。扩展的标识符为 '${publisher}.${name}'。使用 '--force' 参数更新到最新版本。若要安装特定版本，请提供 '@${version}'。例如:'vscode.csharp@1.2.3'。","使用 --install-extension 时安装扩展的预发行版本","卸载扩展。","更新已安装的扩展。","为扩展启用实验性 API 功能。可以输入一个或多个扩展的 ID 来进行单独启用。","打印版本。","打印详细输出(表示 - 等待)。","要使用的日志级别。默认值为 \"info\"。允许的值为 \"critical\"、\"error\"、\"warn\"、\"info\"、\"debug\"、\"trace\"、\"off\"。还可以通过以下格式传递扩展 ID 和日志级别以配置扩展的日志级别: \"${publisher}.${name}:${logLevel}\"。例如: \"vscode.csharp:trace\"。可以接收一个或多个此类条目。","打印进程使用情况和诊断信息。","启动期间运行 CPU 探查器。","禁用所有已安装的扩展。此选项不会持久化，并且仅在命令打开新窗口时有效。","禁用提供的扩展。此选项不会持久化，并且仅在命令打开新窗口时有效。","打开或关闭同步。","允许调试和分析扩展。您可以在开发人员工具中找到连接 URI。","允许扩展宿主在启动后暂停时进行扩展的调试和分析。您可以在开发人员工具中找到连接 URI。","禁用 GPU 硬件加速。","仅当需要在 Linux 上以 sudo 用户身份启动应用程序或在 Windows 上的 applocker 环境中以提升的用户身份运行时，才使用此选项。","显示 VS Code 收集的所有遥测事件。","请改用 {0}。","路径","使用情况","选项","要读取其他程序的输出，请追加 \"-\" (例如 \"echo Hello World | {0} -')","要从 stdin 中读取，请追加 \"-\" (例如 \"ps aux | grep code | {0} -')","子命令","未知版本","未知提交"]}