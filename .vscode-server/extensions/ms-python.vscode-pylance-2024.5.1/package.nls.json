{
    "Common.Yes": "Yes",
    "Common.No": "No",
    "Common.Help": "Help",
    "Common.remindMeLater": "Remind me later",
    "Common.reload": "Reload",
    "LanguageServer.settingsMigratedMessage": "Settings applicable to Microsoft Language Server were copied to Pylance settings. Please check settings.json file(s) for details.",
    "LanguageServer.settingsMigrationError": "The following settings could not be migrated:",
    "Insiders.installingPreRelease": "Installing Pylance pre-release build...",
    "ClientLoc.typeCheckingModeStatusItem.name": "Python Type Checking Mode",
    "ClientLoc.typeCheckingModeStatusItem.text": "Type Checking: {0}",
    "ClientLoc.typeCheckingModeStatusItem.titleOff": "Switch to off",
    "ClientLoc.typeCheckingModeStatusItem.titleOn": "Switch to on",
    "ClientLoc.autoImportCompletionsStatusItem.name": "Python Auto Import Completions Mode",
    "ClientLoc.autoImportCompletionsStatusItem.text": "Auto Import Completions: {0}",
    "ClientLoc.autoImportCompletionsStatusItem.titleOff": "Switch to off",
    "ClientLoc.autoImportCompletionsStatusItem.titleOn": "Switch to on",
    "ClientLoc.updateSettingsErrorMsgFormatted": "Failed to update setting '{0}.{1}'.",
    "ClientLoc.ServerRestart.crashMessage": "Pylance has crashed.",
    "ClientLoc.ServerRestart.restartingMessage": "Restarting Pylance using Node.js ...",
    "ClientLoc.ServerRestart.crashRestartingMessage": "Pylance has crashed. Pylance will restart when you select a Node.js executable to run Pylance.",
    "ClientLoc.ServerRestart.restartQuestion": "Pylance has crashed. Would you like to try using a Node.js executable to run the language server?",
    "ClientLoc.ServerRestart.selectButton": "Select",
    "ClientLoc.ServerRestart.selectNodeJsTitle": "Select Node.js executable to run Pylance",
    "ClientLoc.askNodeSafetyQuestion": "Pylance is configured to run with {0}. Do you want to use this executable to run Pylance?",
    "ClientLoc.crashTooManyRestarts": "Pylance has crashed 5 times in the last 3 minutes. Pylance will not be restarted. See the output for more information.",
    "Refactoring.MoveSymbol.progressBarTitle": "Move Symbol To...",
    "Refactoring.MoveSymbol.newFileLabel": "Enter destination file path",
    "Refactoring.MoveSymbol.newFileDetail": "Enter path or select destination file",
    "Refactoring.MoveSymbol.separatorText": "Destination Files",
    "Refactoring.MoveSymbol.quickPickPlaceHolder": "Search destination file",
    "Refactoring.MoveSymbol.quickPickTitle": "Select destination for move",
    "Refactoring.MoveSymbol.openDialogOpenLabel": "Select",
    "Refactoring.MoveSymbol.openDialogTitle": "Select new file to move the symbol to...",
    "Refactoring.SearchImports.quickPickPlaceHolder": "Search imports",
    "Refactoring.SearchImports.quickPickTitle": "Search additional matching imports",
    "settings.python.analysis.inlayHints.variableTypes.description": "Enable/disable inlay hints for variable types:\n```python\nfoo':list[str]' = [\"a\"]\n \n```\n",
    "settings.python.analysis.inlayHints.functionReturnTypes.description": "Enable/disable inlay hints for function return types:\n```python\ndef foo(x:int) '-> int':\n\treturn x\n```\n",
    "settings.python.analysis.inlayHints.pytestParameters.description": "Enable/disable inlay hints for pytest function parameter types:\n```python\ndef test_foo(my_fixture: 'str'):\n\tassert(my_fixture == 'foo')\n```\n",
    "settings.python.analysis.inlayHints.callArgumentNames.description": "Enable/disable inlay hints for call argument names:\n```python\ndatetime('year='2019, 'month='10, 'day='27)\n```\n",
    "settings.python.analysis.completeFunctionParens.description": "Add parentheses to function completions.",
    "settings.python.analysis.autoImportCompletions.description": "Enable auto-import completions.",
    "settings.python.analysis.autoFormatStrings.description": "When typing a '{' in a string, automatically prefix the string with an 'f'.",
    "settings.python.analysis.autoSearchPaths.description": "Automatically add common search paths like 'src'.",
    "settings.python.analysis.autoIndent.description": "Automatically adjust indentation based on language semantics when typing Python code.",
    "settings.python.analysis.stubPath.description": "Path to directory containing custom type stub files.",
    "settings.python.analysis.diagnosticMode.description": "Analysis scope for showing diagnostics.",
    "settings.python.analysis.extraPaths.description": "Additional import search resolution paths",
    "settings.python.analysis.include.description": "Paths of directories or files that should be included. If no paths are specified, Pylance defaults to the workspace root directory. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character).",
    "settings.python.analysis.exclude.description": "Paths of directories or files that should not be included. These override the include directories, allowing specific subdirectories to be excluded. Note that files in the exclude paths may still be included in the analysis if they are referenced (imported) by source files that are not excluded. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character). If no exclude paths are specified, Pylance automatically excludes the following: `**/node_modules`, `**/__pycache__`, `.git` and any virtual environment directories.",
    "settings.python.analysis.ignore.description": "Paths of directories or files whose diagnostic output (errors and warnings) should be suppressed even if they are an included file or within the transitive closure of an included file. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character).",
    "settings.python.analysis.indexing.description": "Enable indexing of installed third party libraries and user files for language features such as auto-import, add import, workspace symbols and etc.",
    "settings.python.analysis.userFileIndexingLimit.description": "Maximum number of user files to index in the workspace. Indexing files is a performance-intensive task. Please use this setting to limit the number of files you want us to index. If you enter -1, we will index all files.",
    "settings.python.analysis.persistAllIndices.description": "Indices for all third party libraries will be persisted to disk.",
    "settings.python.analysis.extraCommitChars.description": "Allow using '.', '(' as commit characters when applicable.",
    "settings.python.analysis.useLibraryCodeForTypes.description": "Use library implementations to extract type information when type stub is not present.",
    "settings.typecheckingMode.off.description": "Show diagnostics for invalid syntax, unresolved imports, undefined variables.",
    "settings.typecheckingMode.basic.description": "All \"off\" rules + basic type checking rules.",
    "settings.typecheckingMode.standard.description": "All \"off\" rules + basic type checking rules + standard typechecker rules.",
    "settings.typecheckingMode.strict.description": "All \"off\" rules + all type checking rules.",
    "settings.python.analysis.fixAll.description": "source fixes to run in fix all.",
    "settings.python.analysis.packageIndexDepths.description": "Used to override how many levels under installed packages to index on a per package basis. By default, only top-level modules are indexed (depth = 1). To index submodules, increase depth by 1 for each level of submodule you want to index. Accepted values are:\n```JSON\n{\"name\": \"package name (str)\",\n \"depth\": \"depth to scan (int)\",\n \"includeAllSymbols\": \"whether to include all symbols (bool)\"}\n\n```\nIf `include all symbols` is set to `false`, only symbols in each package's `__all__` are included. When it's set to `true`, Pylance will index every module/top level symbol declarations in the file.  \n  \nUsage example: \n```JSON\n[\n\t{\"name\": \"sklearn\", \"depth\": 2, \"includeAllSymbols\": true},\n\t{\"name\": \"matplotlib\", \"depth\": 3, \"includeAllSymbols\": false}\n]\n\n```\n",
    "settings.python.analysis.diagnosticSeverityOverrides.description": "Allows a user to override the severity levels for individual diagnostics. Use the rule name as a key and one of \"error\", \"warning\", \"information\", \"none\", `true` (alias for \"error\") or `false` (alias for \"none\") as value. The default value shown for each diagnostic is the default when \"python.analysis.typeCheckingMode\" is set to \"off\". See [here](https://github.com/microsoft/pyright/blob/main/docs/configuration.md#diagnostic-rule-defaults) for defaults for each type checking mode (\"off\", \"basic\" and \"strict\").",
    "settings.python.analysis.logLevel.description": "Specifies the level of logging for the Output panel",
    "settings.python.analysis.typeshedPaths.description": "Paths to look for typeshed modules.",
    "settings.python.analysis.importFormat.description": "Defines the default format for import module.",
    "settings.python.analysis.enableSyncServer.description": "Use sync server mode [Experimental]. For internal use only, may cause Pylance to stop working.",
    "settings.python.analysis.enablePytestSupport.description": "Enables pytest support in Pylance.",
    "settings.python.analysis.gotoDefinitionInStringLiteral.description": "For string literals that look like module names, enables go to definition to go to the module.",
    "settings.python.analysis.nodeExecutable.description": "Path to a Node.js executable to use for running the language server. If not specified, the language server will use the Node.js executable that ships with VS Code. Set this option if you're having trouble with Pylance running out of memory. See [here](https://aka.ms/AApf7ox) for more information.",
    "commands.pylance.reportIssue.title": "Pylance: Report Issue...",
    "commands.pylance.indexing.clearPersistedIndices.title": "Pylance: Clear All Persisted Indices",
    "commands.pylance.profiling.start.title": "Pylance: Start Profiling",
    "commands.pylance.profiling.stop.title": "Pylance: Stop Profiling",
    "commands.pylance.logging.start.title": "Pylance: Start Logging",
    "commands.pylance.logging.stop.title": "Pylance: Stop Logging",
    "commands.pylance.gotoOutputChannel.title": "Pylance: Go to output channel"
}
